<?xml version="1.0"?>
<ruleset name="ETSGlobal">
    <arg name="basepath" value="."/>
    <arg name="extensions" value="php"/>
    <arg name="colors" />

    <!-- Show progress of the run -->
    <arg value="sp"/>

    <config name="installed_paths" value="../../slevomat/coding-standard"/>

    <exclude-pattern>vendor</exclude-pattern>

    <!-- Import PSR-1 coding standard (base) -->
    <rule ref="PSR1"/>
    <rule ref="PSR1.Methods.CamelCapsMethodName.NotCamelCaps">
        <exclude-pattern>Tests/*</exclude-pattern>
    </rule>

    <!-- Import PSR-2 coding standard (base) -->
    <rule ref="PSR2"/>

    <!-- Forbid `array(...)` -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <!-- Forbid duplicate classes -->
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <!-- Forbid empty statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- But allow empty catch -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>
    </rule>
    <!-- Forbid final methods in final classes -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <!-- Forbid useless empty method overrides -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    <!-- Forbid inline HTML in PHP code -->
    <rule ref="Generic.Files.InlineHTML"/>
    <!-- Force whitespace after a type cast -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <!-- Forbid PHP 4 constructors -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <!-- Forbid any content before opening tag -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <!-- Forbid deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <!-- Forbid alias functions, i.e. `sizeof()`, `delete()` -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array"
                      value="
                    chop => rtrim,
                    close => closedir,
                    delete => unset,
                    doubleval => floatval,
                    fputs => fwrite,
                    ini_alter => ini_set,
                    is_double => is_float,
                    is_integer => is_int,
                    is_long => is_int,
                    is_null => null,
                    is_real => is_float,
                    is_writeable => is_writable,
                    join => implode,
                    key_exists => array_key_exists,
                    pos => current,
                    show_source => highlight_file,
                    sizeof => count,
                    strchr => strstr
                "/>
        </properties>
    </rule>
    <!-- Forbid useless inline string concatenation -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <!-- But multiline is useful for readability -->
        <properties>
            <property name="allowMultiline" type="boolean" value="true"/>
        </properties>
    </rule>
    <!-- Forbid backtick operator -->
    <rule ref="Generic.PHP.BacktickOperator"/>
    <!-- Forbid short open tag -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <!-- Forbid `php_sapi_name()` function -->
    <rule ref="Generic.PHP.SAPIUsage"/>

    <!-- Forbid comments starting with # -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Require comma after last element in multi-line array -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
    <!-- Disallows implicit array creation. -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>
    <!-- Require presence of constant visibility -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" type="boolean" value="true"/>
        </properties>
    </rule>
    <!-- Require comma after last element in multi-line array -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
    <!-- Disallows implicit array creation. -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>
    <!-- Require presence of constant visibility -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" type="boolean" value="true"/>
        </properties>
    </rule>
    <!-- Disallows late static binding for constants. -->
    <rule ref="SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants"/>
    <!-- Forbid empty lines around class declarations -->
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0"/>
            <property name="linesCountBeforeClosingBrace" value="0"/>
        </properties>
    </rule>
    <!-- Class names should be referenced via ::class constant when possible. -->
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
    <!-- Prohibits multiple traits separated by commas in one use statement. -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>
    <!-- Enforces configurable number of lines before first use, after last use and between two use statements. -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="0"/>
        </properties>
    </rule>
    <!-- Forbid dead code -->
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>
    <!-- Forbid useless annotations - Git and LICENCE file provide more accurate information -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@api"/>
                <element value="@author"/>
                <element value="@category"/>
                <element value="@copyright"/>
                <element value="@created"/>
                <element value="@license"/>
                <element value="@package"/>
                <element value="@since"/>
                <element value="@subpackage"/>
                <element value="@version"/>
            </property>
        </properties>
    </rule>
    <!-- Forbid empty comments -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i"/>
                <element value="~^Created by \S+\.\z~i"/>
                <element value="~^\S+ [gs]etter\.\z~i"/>
            </property>
        </properties>
    </rule>
    <!-- report invalid format of inline phpDocs with @var -->
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>
    <!-- Reports documentation comments containing only {@inheritDoc} annotation because inheritance is automatic and it's not needed to use a special annotation for it. -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>
    <!-- Forbid assignments in conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
    <!-- Enforces configurable number of lines around block control structures. -->
    <rule ref="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing">
        <properties>
            <property name="tokensToCheck" type="array">
                <element value="T_TRY"/>
            </property>
        </properties>
    </rule>
    <!-- Enforces configurable number of lines around jump statements. -->
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
        <properties>
            <property name="tokensToCheck" type="array">
                <element value="T_BREAK"/>
                <element value="T_CONTINUE"/>
                <element value="T_RETURN"/>
                <element value="T_THROW"/>
                <element value="T_YIELD"/>
                <element value="T_YIELD_FROM"/>
            </property>
        </properties>
    </rule>
    <!-- Disallows use of continue without integer operand in switch because it emits a warning in PHP 7.3 and higher. -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>
    <!-- Disallows use of empty(). -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowEmpty"/>
    <!-- Require usage of early exit -->
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit"/>
    <!-- Require language constructs without parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
    <!-- Require new instances with parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>
    <!-- Require usage of null coalesce operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
    <!-- Requires short ternary operator ?: when possible. -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>
    <!-- Reports useless conditions where both branches return true or false. -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn"/>
    <!-- Reports useless ternary operator where both branches return true or false. -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator"/>
    <!-- Forbid useless unreachable catch blocks -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
    <!-- Require using Throwable instead of Exception -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>
    <!-- Reports closures not using $this that are not declared static. -->
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>
    <!-- Require comma after the last parameter in function or method call (PHP >=7.3) -->
    <!--<rule ref="SlevomatCodingStandard.Functions.TrailingCommaInCall"/>-->
    <!-- Looks for unused inherited variables passed to closure via use. -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
    <!-- Looks for unused parameters. -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter"/>
    <!-- Looks for useless parameter default value. -->
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>
    <!-- Require use statements to be alphabetically sorted -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <!-- Forbid fancy group uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
    <!-- Forbid multiple use statements on same line -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
    <!-- Enforces one space after namespace, disallows content between namespace name and semicolon and disallows use of bracketed syntax. -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>
    <!-- Enforces configurable number of lines before and after namespace. -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing"/>
    <!-- Forbid using absolute class name references (except global ones) -->
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="searchAnnotations" type="boolean" value="true"/>
            <property name="allowFallbackGlobalConstants" type="boolean" value="true"/>
            <property name="allowFallbackGlobalFunctions" type="boolean" value="true"/>
            <property name="allowFullyQualifiedGlobalClasses" type="boolean" value="true"/>
            <property name="allowFullyQualifiedGlobalConstants" type="boolean" value="true"/>
            <property name="allowFullyQualifiedGlobalFunctions" type="boolean" value="true"/>
            <property name="allowFullyQualifiedNameForCollidingClasses" type="boolean" value="true"/>
            <property name="allowFullyQualifiedNameForCollidingConstants" type="boolean" value="true"/>
            <property name="allowFullyQualifiedNameForCollidingFunctions" type="boolean" value="true"/>
        </properties>
    </rule>
    <!-- Requires only one namespace in a file. -->
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>
    <!-- Forbid unused use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" type="boolean" value="true"/>
        </properties>
    </rule>
    <!-- Forbid superfluous leading backslash in use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
    <!-- Forbid useless uses of the same namespace -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
    <!-- Looks for use alias that is same as unqualified name. -->
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>
    <!-- Enforces configurable number of lines before first use, after last use and between two different types of use (eg. between use function and use const). Also enforces zero number of lines between same types of use. -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountBetweenUseTypes" value="1"/>
        </properties>
    </rule>
    <!-- Forbid weak comparisons -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>
    <!-- Reports increment and decrement operators not used standalone. -->
    <rule ref="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators"/>
    <!-- Requires using combined assignment operators, eg +=, .= etc. -->
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
    <!-- Enforces configurable number of spaces after the ... operator. -->
    <rule ref="SlevomatCodingStandard.Operators.SpreadOperatorSpacing"/>
    <!-- Looks for useless parentheses. -->
    <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking"/>
    <!-- Enforces using short form of list syntax, [...] instead of list(...). -->
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
    <!-- Forbid use of longhand cast operators -->
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
    <!-- Looks for useless parentheses. -->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>
    <!-- Looks for useless semicolons. -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
    <!-- Require presence of declare(strict_types=1) -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="2"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>
    <!-- Require use of short versions of scalar types (i.e. int instead of integer) -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <!-- Require ? when default value is null -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>

    <!-- Checks for missing parameter typehints in case they can be declared natively -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification" />
        <properties>
            <property name="traversableTypeHints" type="array" value="Doctrine\Common\Collections\Collection"/>
        </properties>
    </rule>
    <!-- Require one space between typehint and variable, require no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>

    <!-- Checks for missing property typehints in case they can be declared natively -->
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array" value="Doctrine\Common\Collections\Collection"/>
        </properties>
    </rule>
    <!-- CHeck property typehint spacing -->
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHintSpacing" />

    <!-- Checks for missing return typehints in case they can be declared natively -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification" />
        <properties>
            <property name="traversableTypeHints" type="array" value="Doctrine\Common\Collections\Collection"/>
        </properties>
    </rule>
    <!-- Require space around colon in return types -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="0"/>
        </properties>
    </rule>

    <!-- Reports useless @var annotation (or whole documentation comment) for constants because the type of constant is always clear. -->
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>
    <!-- Looks for duplicate assignments to a variable. -->
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>
    <!-- Looks for unused variables. -->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <properties>
            <!-- ignore unused $value in foreach when only $key is used -->
            <property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" type="boolean" value="true"/>
        </properties>
    </rule>
    <!-- Looks for useless variables. -->
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>

    <!-- Forbid spaces around square brackets -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <!-- Force array declaration structure -->
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <!-- Disable arrow alignment -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/>
        <!-- Uses indentation of only single space -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>
        <!-- Allow multiple values on a single line -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
        <!-- Allow single values on multi line array -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/>
        <!-- Disable alignment of braces -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/>
        <!-- Disable alignment of values with opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
        <!-- Checked by SlevomatCodingStandard.Arrays.TrailingArrayComma.MissingTrailingComma -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast"/>
    </rule>
    <!-- Forbid class being in a file with different name -->
    <rule ref="Squiz.Classes.ClassFileName"/>
    <!-- Force `self::` for self-reference, force lower-case self, forbid spaces around `::` -->
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <!-- Force phpDoc alignment -->
    <rule ref="Squiz.Commenting.DocCommentAlignment">
        <!-- Allow extra spaces after star, i.e. for indented annotations -->
        <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/>
    </rule>
    <!-- Force rules for function phpDoc -->
    <rule ref="Squiz.Commenting.FunctionComment">
        <!-- Allow `@throws` without description -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>
        <!-- Does not work properly with PHP 7 / short-named types -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>
        <!-- Does not support collections, i.e. `string[]` -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/>
        <!-- Forces incorrect types -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>
        <!-- Breaks with compound return types, i.e. `string|null` -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/>
        <!-- Breaks when all params are not documented -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidTypeHint"/>
        <!-- Doc comment is not required for every method -->
        <exclude name="Squiz.Commenting.FunctionComment.Missing"/>
        <!-- Do not require comments for `@param` -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>
        <!-- Do not require `@param` for all parameters -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>
        <!-- Do not require `@return` for void methods -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>
        <!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
        <!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>
        <!-- Breaks when all params are not documented -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/>
        <!-- Doesn't respect inheritance -->
        <exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/>
        <!-- Don't require @param variable names to be aligned -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
        <!-- Doesn't work with self as typehint -->
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>
    </rule>
    <!-- Forbid global functions -->
    <rule ref="Squiz.Functions.GlobalFunction"/>
    <!-- Forbid `AND` and `OR`, require `&&` and `||` -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <!-- Forbid `global` -->
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <!-- Forbid functions inside functions -->
    <rule ref="Squiz.PHP.InnerFunctions"/>
    <!-- Require PHP function calls in lowercase -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <!-- Forbid dead code -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <!-- Forbid `$this` inside static function -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <!-- Force whitespace before and after concatenation -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="0"/>
            <property name="ignoreNewlines" type="boolean" value="true"/>
        </properties>
    </rule>
    <!-- Forbid strings in `"` unless necessary -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <message>Variable "%s" not allowed in double quoted string; use sprintf() or concatenation instead</message>
    </rule>
    <!-- Forbid braces around string in `echo` -->
    <rule ref="Squiz.Strings.EchoedStrings"/>
    <!-- Forbid spaces in type casts -->
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <!-- Forbid blank line after function opening brace -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
    <!-- Require space after language constructs -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
    <!-- Require space around logical operators -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <!-- Forbid spaces around `->` operator -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" type="boolean" value="true"/>
        </properties>
    </rule>
    <!-- Forbid superfluous whitespaces -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <!-- turned on by PSR2 -> turning back off -->
            <property name="ignoreBlankLines" type="boolean" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <!-- turned off by PSR2 -> turning back on -->
        <severity>5</severity>
    </rule>
</ruleset>
